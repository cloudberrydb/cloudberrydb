-- @Description Tests that a update operation in progress will block all other updates
-- until the transaction is committed.
--
DROP TABLE IF EXISTS ao;
DROP
CREATE TABLE ao (a INT, b INT) USING @amname@;
CREATE
INSERT INTO ao SELECT i as a, i as b FROM generate_series(1,10) AS i;
INSERT 10

-- The actual test begins
1: BEGIN;
BEGIN
2: BEGIN;
BEGIN
2: UPDATE ao SET b = 42 WHERE a = 2;
UPDATE 1
2: SELECT * FROM locktest_master WHERE coalesce = 'ao';
 coalesce | mode          | locktype | node   
----------+---------------+----------+--------
 ao       | ExclusiveLock | relation | master 
(1 row)
2: SELECT * FROM locktest_segments WHERE coalesce = 'ao';
 coalesce | mode          | locktype | node      
----------+---------------+----------+-----------
 ao       | ExclusiveLock | relation | 1 segment 
(1 row)
-- The case here should update a tuple at the same seg with(2).
-- Under jump hash, (2) and (3) are on the same seg(seg0).
1&: UPDATE ao SET b = 42 WHERE a = 3;  <waiting ...>
2: COMMIT;
COMMIT
1<:  <... completed>
UPDATE 1
1: COMMIT;
COMMIT
3: SELECT * FROM ao WHERE a < 5 ORDER BY a;
 a | b  
---+----
 1 | 1  
 2 | 42 
 3 | 42 
 4 | 4  
(4 rows)
0U: SELECT * FROM gp_toolkit.__gp_aovisimap('ao');
 tid          | segno | row_num 
--------------+-------+---------
 (33554432,2) | 1     | 1       
 (33554432,3) | 1     | 2       
(2 rows)
